
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f5  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062b  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000386  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000382  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  74:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <checkKeyLocksCleared>:
	keyLocks[(4 * col) + row] = false;
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
}
  7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <keyLocks>
  80:	81 11       	cpse	r24, r1
  82:	0f c0       	rjmp	.+30     	; 0xa2 <checkKeyLocksCleared+0x26>
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	f9 01       	movw	r30, r18
  8a:	ee 59       	subi	r30, 0x9E	; 158
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	90 81       	ld	r25, Z
  90:	91 11       	cpse	r25, r1
  92:	08 c0       	rjmp	.+16     	; 0xa4 <checkKeyLocksCleared+0x28>
  94:	2f 5f       	subi	r18, 0xFF	; 255
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	20 31       	cpi	r18, 0x10	; 16
  9a:	31 05       	cpc	r19, r1
  9c:	a9 f7       	brne	.-22     	; 0x88 <checkKeyLocksCleared+0xc>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	08 95       	ret
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret

000000a6 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	cli();
  d4:	f8 94       	cli
	PORTD &= 0b00001111;
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	82 bb       	out	0x12, r24	; 18
	if (col > 3) {
  dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	30 f0       	brcs	.+12     	; 0xf0 <__vector_10+0x4a>
		if (checkKeyLocksCleared()) {
  e4:	0e 94 3e 00 	call	0x7c	; 0x7c <checkKeyLocksCleared>
  e8:	81 11       	cpse	r24, r1
			PORTA = 0b00000000;
  ea:	1b ba       	out	0x1b, r1	; 27
		}
		col = 0;
  ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <col>
	}

	uint8_t control;

	control = (PIND & 0b00001111) | (0b00010000 << col);
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <col>
  f6:	28 2f       	mov	r18, r24
  f8:	2f 70       	andi	r18, 0x0F	; 15
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__vector_10+0x5e>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	3a 95       	dec	r19
 106:	e2 f7       	brpl	.-8      	; 0x100 <__vector_10+0x5a>
 108:	82 2b       	or	r24, r18
	PORTD = control;
 10a:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");
 10c:	00 00       	nop
	control = PIND;
 10e:	40 b3       	in	r20, 0x10	; 16
	row = 0;
 110:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <row>
	while (row < 4) {
 114:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	08 f0       	brcs	.+2      	; 0x11e <__vector_10+0x78>
 11c:	bc c0       	rjmp	.+376    	; 0x296 <__vector_10+0x1f0>
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
	}
	return true;
}

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 124:	a1 e0       	ldi	r26, 0x01	; 1
						PORTA = out;
					} else {
						mask >>= ((numbersCount - 2) * 4);
						out = PINB;
						out |= (keyCode << ((numbersCount - 2) * 4));
						out &= ((keyCode << ((numbersCount - 2) * 4)) | mask);
 126:	60 ef       	ldi	r22, 0xF0	; 240
 128:	70 e0       	ldi	r23, 0x00	; 0
	PORTD = control;
	asm volatile ("nop");
	control = PIND;
	row = 0;
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 12a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 12e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
 132:	79 01       	movw	r14, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_10+0x94>
 136:	ee 0c       	add	r14, r14
 138:	ff 1c       	adc	r15, r15
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <__vector_10+0x90>
 13e:	c7 01       	movw	r24, r14
 140:	84 23       	and	r24, r20
 142:	95 23       	and	r25, r21
 144:	e9 01       	movw	r28, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <__vector_10+0xa6>
 148:	cc 0f       	add	r28, r28
 14a:	dd 1f       	adc	r29, r29
 14c:	ea 95       	dec	r30
 14e:	e2 f7       	brpl	.-8      	; 0x148 <__vector_10+0xa2>
 150:	8c 17       	cp	r24, r28
 152:	9d 07       	cpc	r25, r29
 154:	09 f0       	breq	.+2      	; 0x158 <__vector_10+0xb2>
 156:	88 c0       	rjmp	.+272    	; 0x268 <__vector_10+0x1c2>
			if (!isKeyLocked(col, row)) {
 158:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
 15c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	d4 e0       	ldi	r29, 0x04	; 4
 164:	8d 9f       	mul	r24, r29
 166:	e0 0d       	add	r30, r0
 168:	f1 1d       	adc	r31, r1
 16a:	11 24       	eor	r1, r1
 16c:	ee 59       	subi	r30, 0x9E	; 158
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
	asm volatile ("nop");
	control = PIND;
	row = 0;
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
			if (!isKeyLocked(col, row)) {
 172:	81 11       	cpse	r24, r1
 174:	86 c0       	rjmp	.+268    	; 0x282 <__vector_10+0x1dc>
				lockKey(col, row);
 176:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
 17a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
	}
	return true;
}

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	94 e0       	ldi	r25, 0x04	; 4
 182:	89 9f       	mul	r24, r25
 184:	e0 0d       	add	r30, r0
 186:	f1 1d       	adc	r31, r1
 188:	11 24       	eor	r1, r1
 18a:	ee 59       	subi	r30, 0x9E	; 158
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	a0 83       	st	Z, r26
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
			if (!isKeyLocked(col, row)) {
				lockKey(col, row);
				uint8_t keyCode = 0b00000000;
					keyCode |= col << 2;
 190:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
 194:	88 0f       	add	r24, r24
 196:	88 0f       	add	r24, r24
					keyCode |= row;
 198:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
 19c:	98 2f       	mov	r25, r24
 19e:	9e 2b       	or	r25, r30
					uint8_t out;
					uint8_t mask = 0b11110000;
					if (numbersCount < 2) {
 1a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	38 f5       	brcc	.+78     	; 0x1f6 <__vector_10+0x150>
						mask >>= (numbersCount * 4);
 1a8:	f0 91 60 00 	lds	r31, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out = PINA;
 1ac:	c9 b3       	in	r28, 0x19	; 25
						out |= (keyCode << (numbersCount * 4));
 1ae:	89 2f       	mov	r24, r25
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	b0 91 60 00 	lds	r27, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out &= ((keyCode << (numbersCount * 4)) | mask);
 1b6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	ff 0f       	add	r31, r31
 1bc:	ff 0f       	add	r31, r31
 1be:	8b 01       	movw	r16, r22
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__vector_10+0x120>
 1c2:	15 95       	asr	r17
 1c4:	07 95       	ror	r16
 1c6:	fa 95       	dec	r31
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <__vector_10+0x11c>
 1ca:	ee 0f       	add	r30, r30
 1cc:	ee 0f       	add	r30, r30
 1ce:	7c 01       	movw	r14, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__vector_10+0x130>
 1d2:	ee 0c       	add	r14, r14
 1d4:	ff 1c       	adc	r15, r15
 1d6:	ea 95       	dec	r30
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <__vector_10+0x12c>
 1da:	f7 01       	movw	r30, r14
 1dc:	e0 2b       	or	r30, r16
 1de:	fb 2f       	mov	r31, r27
 1e0:	ff 0f       	add	r31, r31
 1e2:	ff 0f       	add	r31, r31
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__vector_10+0x144>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	fa 95       	dec	r31
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <__vector_10+0x140>
 1ee:	8c 2b       	or	r24, r28
 1f0:	8e 23       	and	r24, r30
						PORTA = out;
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	33 c0       	rjmp	.+102    	; 0x25c <__vector_10+0x1b6>
					} else {
						mask >>= ((numbersCount - 2) * 4);
 1f6:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out = PINB;
 1fa:	b6 b3       	in	r27, 0x16	; 22
						out |= (keyCode << ((numbersCount - 2) * 4));
 1fc:	89 2f       	mov	r24, r25
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out &= ((keyCode << ((numbersCount - 2) * 4)) | mask);
 204:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	02 50       	subi	r16, 0x02	; 2
 20c:	11 09       	sbc	r17, r1
 20e:	00 0f       	add	r16, r16
 210:	11 1f       	adc	r17, r17
 212:	00 0f       	add	r16, r16
 214:	11 1f       	adc	r17, r17
 216:	7b 01       	movw	r14, r22
 218:	02 c0       	rjmp	.+4      	; 0x21e <__vector_10+0x178>
 21a:	f5 94       	asr	r15
 21c:	e7 94       	ror	r14
 21e:	0a 95       	dec	r16
 220:	e2 f7       	brpl	.-8      	; 0x21a <__vector_10+0x174>
 222:	87 01       	movw	r16, r14
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	22 97       	sbiw	r28, 0x02	; 2
 228:	cc 0f       	add	r28, r28
 22a:	dd 1f       	adc	r29, r29
 22c:	cc 0f       	add	r28, r28
 22e:	dd 1f       	adc	r29, r29
 230:	7c 01       	movw	r14, r24
 232:	02 c0       	rjmp	.+4      	; 0x238 <__vector_10+0x192>
 234:	ee 0c       	add	r14, r14
 236:	ff 1c       	adc	r15, r15
 238:	ca 95       	dec	r28
 23a:	e2 f7       	brpl	.-8      	; 0x234 <__vector_10+0x18e>
 23c:	e7 01       	movw	r28, r14
 23e:	c0 2b       	or	r28, r16
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	32 97       	sbiw	r30, 0x02	; 2
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_10+0x1ac>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	ea 95       	dec	r30
 254:	e2 f7       	brpl	.-8      	; 0x24e <__vector_10+0x1a8>
 256:	8b 2b       	or	r24, r27
 258:	8c 23       	and	r24, r28
						PORTB = out;
 25a:	88 bb       	out	0x18, r24	; 24
					}
					numbersCount++;
 25c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_10+0x1dc>
			}
		} else {
			unlockKey(col, row);
 268:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
 26c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
}

void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	94 e0       	ldi	r25, 0x04	; 4
 274:	89 9f       	mul	r24, r25
 276:	e0 0d       	add	r30, r0
 278:	f1 1d       	adc	r31, r1
 27a:	11 24       	eor	r1, r1
 27c:	ee 59       	subi	r30, 0x9E	; 158
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	10 82       	st	Z, r1
					numbersCount++;
			}
		} else {
			unlockKey(col, row);
		}
		row++;
 282:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <row>
	control = (PIND & 0b00001111) | (0b00010000 << col);
	PORTD = control;
	asm volatile ("nop");
	control = PIND;
	row = 0;
	while (row < 4) {
 28c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	08 f4       	brcc	.+2      	; 0x296 <__vector_10+0x1f0>
 294:	4a cf       	rjmp	.-364    	; 0x12a <__vector_10+0x84>
		} else {
			unlockKey(col, row);
		}
		row++;
	}
	col++;
 296:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <col>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <Timer0Init>:

void Timer0Init() {
	OCR0 = 1;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	87 7b       	andi	r24, 0xB7	; 183
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
 2da:	89 b7       	in	r24, 0x39	; 57
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	88 7f       	andi	r24, 0xF8	; 248
 2e4:	85 60       	ori	r24, 0x05	; 5
 2e6:	83 bf       	out	0x33, r24	; 51
 2e8:	08 95       	ret

000002ea <main>:
}

int main(void) {
    DDRD |= 0b11110000;
 2ea:	81 b3       	in	r24, 0x11	; 17
 2ec:	80 6f       	ori	r24, 0xF0	; 240
 2ee:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110000;
 2f0:	81 b3       	in	r24, 0x11	; 17
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	81 bb       	out	0x11, r24	; 17

	DDRA = 0b11111111;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
 2fa:	1b ba       	out	0x1b, r1	; 27
	
	DDRB = 0b11111111;
 2fc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;
 2fe:	18 ba       	out	0x18, r1	; 24
	
	Timer0Init();
 300:	0e 94 67 01 	call	0x2ce	; 0x2ce <Timer0Init>
	sei();
 304:	78 94       	sei
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x1c>

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
