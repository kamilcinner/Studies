
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  000003b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bd  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000620  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022e  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000302  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
  74:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lockKey>:
volatile uint8_t row;

volatile uint8_t numbersCount = 0;

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	94 e0       	ldi	r25, 0x04	; 4
  80:	89 9f       	mul	r24, r25
  82:	60 0d       	add	r22, r0
  84:	71 1d       	adc	r23, r1
  86:	11 24       	eor	r1, r1
  88:	fb 01       	movw	r30, r22
  8a:	ee 59       	subi	r30, 0x9E	; 158
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 83       	st	Z, r24
  92:	08 95       	ret

00000094 <unlockKey>:
}

void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	94 e0       	ldi	r25, 0x04	; 4
  98:	89 9f       	mul	r24, r25
  9a:	60 0d       	add	r22, r0
  9c:	71 1d       	adc	r23, r1
  9e:	11 24       	eor	r1, r1
  a0:	fb 01       	movw	r30, r22
  a2:	ee 59       	subi	r30, 0x9E	; 158
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	10 82       	st	Z, r1
  a8:	08 95       	ret

000000aa <isKeyLocked>:
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	89 9f       	mul	r24, r25
  b0:	60 0d       	add	r22, r0
  b2:	71 1d       	adc	r23, r1
  b4:	11 24       	eor	r1, r1
  b6:	fb 01       	movw	r30, r22
  b8:	ee 59       	subi	r30, 0x9E	; 158
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	80 81       	ld	r24, Z
}
  be:	08 95       	ret

000000c0 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	PORTD &= 0b00001111;
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	82 bb       	out	0x12, r24	; 18
	if (col > 3) {
  f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
  f8:	84 30       	cpi	r24, 0x04	; 4
  fa:	10 f0       	brcs	.+4      	; 0x100 <__vector_10+0x40>
		col = 0;
  fc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <col>
	}

	uint8_t control;

	control = (PIND & 0b00001111) | (0b00010000 << col);
 100:	80 b3       	in	r24, 0x10	; 16
 102:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <col>
 106:	28 2f       	mov	r18, r24
 108:	2f 70       	andi	r18, 0x0F	; 15
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 c0       	rjmp	.+2      	; 0x112 <__vector_10+0x52>
 110:	88 0f       	add	r24, r24
 112:	3a 95       	dec	r19
 114:	ea f7       	brpl	.-6      	; 0x110 <__vector_10+0x50>
 116:	82 2b       	or	r24, r18
	PORTD = control;
 118:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");
 11a:	00 00       	nop
	control = PIND;
 11c:	40 b3       	in	r20, 0x10	; 16
	row = 0;
 11e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <row>
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0
volatile uint8_t row;

volatile uint8_t numbersCount = 0;

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 128:	c1 e0       	ldi	r28, 0x01	; 1
						PORTA = out;
					} else {
						mask >>= ((numbersCount - 2) * 4);
						out = PINB;
						out |= (keyCode << ((numbersCount - 2) * 4));
						out &= ((keyCode << ((numbersCount - 2) * 4)) | mask);
 12a:	a0 ef       	ldi	r26, 0xF0	; 240
 12c:	b0 e0       	ldi	r27, 0x00	; 0
	control = (PIND & 0b00001111) | (0b00010000 << col);
	PORTD = control;
	asm volatile ("nop");
	control = PIND;
	row = 0;
	while (row < 4) {
 12e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	08 f0       	brcs	.+2      	; 0x138 <__vector_10+0x78>
 136:	b7 c0       	rjmp	.+366    	; 0x2a6 <__vector_10+0x1e6>
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 138:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 13c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <row>
 140:	7b 01       	movw	r14, r22
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_10+0x88>
 144:	ee 0c       	add	r14, r14
 146:	ff 1c       	adc	r15, r15
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <__vector_10+0x84>
 14c:	c7 01       	movw	r24, r14
 14e:	84 23       	and	r24, r20
 150:	95 23       	and	r25, r21
 152:	fb 01       	movw	r30, r22
 154:	02 c0       	rjmp	.+4      	; 0x15a <__vector_10+0x9a>
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	2a 95       	dec	r18
 15c:	e2 f7       	brpl	.-8      	; 0x156 <__vector_10+0x96>
 15e:	9f 01       	movw	r18, r30
			if (!isKeyLocked(col, row)) {
 160:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
	PORTD = control;
	asm volatile ("nop");
	control = PIND;
	row = 0;
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 164:	82 17       	cp	r24, r18
 166:	93 07       	cpc	r25, r19
 168:	09 f0       	breq	.+2      	; 0x16c <__vector_10+0xac>
 16a:	8c c0       	rjmp	.+280    	; 0x284 <__vector_10+0x1c4>
			if (!isKeyLocked(col, row)) {
 16c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	14 e0       	ldi	r17, 0x04	; 4
 174:	81 9f       	mul	r24, r17
 176:	e0 0d       	add	r30, r0
 178:	f1 1d       	adc	r31, r1
 17a:	11 24       	eor	r1, r1
 17c:	ee 59       	subi	r30, 0x9E	; 158
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
	asm volatile ("nop");
	control = PIND;
	row = 0;
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
			if (!isKeyLocked(col, row)) {
 182:	81 11       	cpse	r24, r1
 184:	8a c0       	rjmp	.+276    	; 0x29a <__vector_10+0x1da>
				if (numbersCount < 4) {
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	08 f0       	brcs	.+2      	; 0x190 <__vector_10+0xd0>
 18e:	85 c0       	rjmp	.+266    	; 0x29a <__vector_10+0x1da>
					lockKey(col, row);
 190:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <row>
 194:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
volatile uint8_t row;

volatile uint8_t numbersCount = 0;

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	24 e0       	ldi	r18, 0x04	; 4
 19c:	82 9f       	mul	r24, r18
 19e:	e0 0d       	add	r30, r0
 1a0:	f1 1d       	adc	r31, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	ee 59       	subi	r30, 0x9E	; 158
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	c0 83       	st	Z, r28
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
			if (!isKeyLocked(col, row)) {
				if (numbersCount < 4) {
					lockKey(col, row);
					uint8_t keyCode = 0b00000000;
					keyCode |= col << 2;
 1aa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
 1ae:	34 e0       	ldi	r19, 0x04	; 4
 1b0:	83 9f       	mul	r24, r19
 1b2:	c0 01       	movw	r24, r0
 1b4:	11 24       	eor	r1, r1
					keyCode |= row;
 1b6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <row>
 1ba:	89 2b       	or	r24, r25
					uint8_t out;
					uint8_t mask = 0b11110000;
					if (numbersCount < 2) {
 1bc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	22 30       	cpi	r18, 0x02	; 2
 1c4:	40 f5       	brcc	.+80     	; 0x216 <__vector_10+0x156>
						mask >>= (numbersCount * 4);
 1c6:	e0 90 60 00 	lds	r14, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out = PINA;
 1ca:	d9 b3       	in	r29, 0x19	; 25
						out |= (keyCode << (numbersCount * 4));
 1cc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out &= ((keyCode << (numbersCount * 4)) | mask);
 1d0:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d4:	f4 e0       	ldi	r31, 0x04	; 4
 1d6:	ef 9e       	mul	r14, r31
 1d8:	70 01       	movw	r14, r0
 1da:	11 24       	eor	r1, r1
 1dc:	9d 01       	movw	r18, r26
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_10+0x124>
 1e0:	35 95       	asr	r19
 1e2:	27 95       	ror	r18
 1e4:	ea 94       	dec	r14
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <__vector_10+0x120>
 1e8:	79 01       	movw	r14, r18
 1ea:	34 e0       	ldi	r19, 0x04	; 4
 1ec:	03 9f       	mul	r16, r19
 1ee:	80 01       	movw	r16, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	9c 01       	movw	r18, r24
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <__vector_10+0x138>
 1f6:	22 0f       	add	r18, r18
 1f8:	0a 95       	dec	r16
 1fa:	ea f7       	brpl	.-6      	; 0x1f6 <__vector_10+0x136>
 1fc:	2e 29       	or	r18, r14
 1fe:	14 e0       	ldi	r17, 0x04	; 4
 200:	e1 9f       	mul	r30, r17
 202:	f0 01       	movw	r30, r0
 204:	11 24       	eor	r1, r1
 206:	01 c0       	rjmp	.+2      	; 0x20a <__vector_10+0x14a>
 208:	88 0f       	add	r24, r24
 20a:	ea 95       	dec	r30
 20c:	ea f7       	brpl	.-6      	; 0x208 <__vector_10+0x148>
 20e:	8d 2b       	or	r24, r29
 210:	28 23       	and	r18, r24
						PORTA = out;
 212:	2b bb       	out	0x1b, r18	; 27
 214:	31 c0       	rjmp	.+98     	; 0x278 <__vector_10+0x1b8>
					} else {
						mask >>= ((numbersCount - 2) * 4);
 216:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out = PINB;
 21a:	d6 b3       	in	r29, 0x16	; 22
						out |= (keyCode << ((numbersCount - 2) * 4));
 21c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out &= ((keyCode << ((numbersCount - 2) * 4)) | mask);
 220:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 224:	10 e0       	ldi	r17, 0x00	; 0
 226:	02 50       	subi	r16, 0x02	; 2
 228:	11 09       	sbc	r17, r1
 22a:	00 0f       	add	r16, r16
 22c:	11 1f       	adc	r17, r17
 22e:	00 0f       	add	r16, r16
 230:	11 1f       	adc	r17, r17
 232:	7d 01       	movw	r14, r26
 234:	02 c0       	rjmp	.+4      	; 0x23a <__vector_10+0x17a>
 236:	f5 94       	asr	r15
 238:	e7 94       	ror	r14
 23a:	0a 95       	dec	r16
 23c:	e2 f7       	brpl	.-8      	; 0x236 <__vector_10+0x176>
 23e:	87 01       	movw	r16, r14
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	32 97       	sbiw	r30, 0x02	; 2
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	7c 01       	movw	r14, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <__vector_10+0x194>
 250:	ee 0c       	add	r14, r14
 252:	ff 1c       	adc	r15, r15
 254:	ea 95       	dec	r30
 256:	e2 f7       	brpl	.-8      	; 0x250 <__vector_10+0x190>
 258:	f7 01       	movw	r30, r14
 25a:	e0 2b       	or	r30, r16
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	22 50       	subi	r18, 0x02	; 2
 260:	31 09       	sbc	r19, r1
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	01 c0       	rjmp	.+2      	; 0x26e <__vector_10+0x1ae>
 26c:	88 0f       	add	r24, r24
 26e:	2a 95       	dec	r18
 270:	ea f7       	brpl	.-6      	; 0x26c <__vector_10+0x1ac>
 272:	8d 2b       	or	r24, r29
 274:	8e 23       	and	r24, r30
						PORTB = out;
 276:	88 bb       	out	0x18, r24	; 24
					}
					numbersCount++;
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 282:	0b c0       	rjmp	.+22     	; 0x29a <__vector_10+0x1da>
				}
			}
		} else {
			unlockKey(col, row);
 284:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
}

void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	14 e0       	ldi	r17, 0x04	; 4
 28c:	81 9f       	mul	r24, r17
 28e:	e0 0d       	add	r30, r0
 290:	f1 1d       	adc	r31, r1
 292:	11 24       	eor	r1, r1
 294:	ee 59       	subi	r30, 0x9E	; 158
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	10 82       	st	Z, r1
				}
			}
		} else {
			unlockKey(col, row);
		}
		row++;
 29a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <row>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <row>
 2a4:	44 cf       	rjmp	.-376    	; 0x12e <__vector_10+0x6e>
	}
	col++;
 2a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <col>
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <col>
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <Timer0Init>:

void Timer0Init() {
	OCR0 = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 2e2:	83 b7       	in	r24, 0x33	; 51
 2e4:	87 7b       	andi	r24, 0xB7	; 183
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
 2ea:	89 b7       	in	r24, 0x39	; 57
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	88 7f       	andi	r24, 0xF8	; 248
 2f4:	85 60       	ori	r24, 0x05	; 5
 2f6:	83 bf       	out	0x33, r24	; 51
 2f8:	08 95       	ret

000002fa <main>:
}

int main(void) {
    DDRD |= 0b11110000;
 2fa:	81 b3       	in	r24, 0x11	; 17
 2fc:	80 6f       	ori	r24, 0xF0	; 240
 2fe:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11110000;
 300:	81 b3       	in	r24, 0x11	; 17
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	81 bb       	out	0x11, r24	; 17

	DDRA = 0b11111111;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
 30a:	1b ba       	out	0x1b, r1	; 27
	
	DDRB = 0b11111111;
 30c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;
 30e:	18 ba       	out	0x18, r1	; 24
	
	Timer0Init();
 310:	0e 94 6f 01 	call	0x2de	; 0x2de <Timer0Init>
	sei();
 314:	78 94       	sei
 316:	ff cf       	rjmp	.-2      	; 0x316 <main+0x1c>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
