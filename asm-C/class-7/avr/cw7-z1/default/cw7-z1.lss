
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b0  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f2  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fd  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 13 01 	call	0x226	; 0x226 <main>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <checkKeyLocksCleared>:
};

volatile uint8_t col = 0;
volatile uint8_t row;

bool checkKeyLocksCleared() {
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i = 0;
	while (i < 16) {
		if (keyLocks[i]) {
  80:	fc 01       	movw	r30, r24
  82:	ef 59       	subi	r30, 0x9F	; 159
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	20 81       	ld	r18, Z
  88:	21 11       	cpse	r18, r1
  8a:	06 c0       	rjmp	.+12     	; 0x98 <checkKeyLocksCleared+0x1c>
  8c:	01 96       	adiw	r24, 0x01	; 1
volatile uint8_t col = 0;
volatile uint8_t row;

bool checkKeyLocksCleared() {
	uint8_t i = 0;
	while (i < 16) {
  8e:	80 31       	cpi	r24, 0x10	; 16
  90:	91 05       	cpc	r25, r1
  92:	b1 f7       	brne	.-20     	; 0x80 <checkKeyLocksCleared+0x4>
		if (keyLocks[i]) {
			return false;
		}
		i++;
	}
	return true;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	08 95       	ret

bool checkKeyLocksCleared() {
	uint8_t i = 0;
	while (i < 16) {
		if (keyLocks[i]) {
			return false;
  98:	80 e0       	ldi	r24, 0x00	; 0
		}
		i++;
	}
	return true;
}
  9a:	08 95       	ret

0000009c <lockKey>:

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	94 e0       	ldi	r25, 0x04	; 4
  a0:	89 9f       	mul	r24, r25
  a2:	60 0d       	add	r22, r0
  a4:	71 1d       	adc	r23, r1
  a6:	11 24       	eor	r1, r1
  a8:	fb 01       	movw	r30, r22
  aa:	ef 59       	subi	r30, 0x9F	; 159
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <unlockKey>:
}

void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	89 9f       	mul	r24, r25
  ba:	60 0d       	add	r22, r0
  bc:	71 1d       	adc	r23, r1
  be:	11 24       	eor	r1, r1
  c0:	fb 01       	movw	r30, r22
  c2:	ef 59       	subi	r30, 0x9F	; 159
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	10 82       	st	Z, r1
  c8:	08 95       	ret

000000ca <isKeyLocked>:
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	89 9f       	mul	r24, r25
  d0:	60 0d       	add	r22, r0
  d2:	71 1d       	adc	r23, r1
  d4:	11 24       	eor	r1, r1
  d6:	fb 01       	movw	r30, r22
  d8:	ef 59       	subi	r30, 0x9F	; 159
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
}
  de:	08 95       	ret

000000e0 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	PORTB &= 0b00001111;
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	88 bb       	out	0x18, r24	; 24
	if (col > 3) {
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	30 f0       	brcs	.+12     	; 0x11c <__vector_10+0x3c>
		if (checkKeyLocksCleared()) {
 110:	0e 94 3e 00 	call	0x7c	; 0x7c <checkKeyLocksCleared>
 114:	81 11       	cpse	r24, r1
			PORTA = 0b00000000;
 116:	1b ba       	out	0x1b, r1	; 27
		}
		col = 0;
 118:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}

	uint8_t control;

	control = (PINB & 0b00001111) | (0b00010000 << col);
 11c:	86 b3       	in	r24, 0x16	; 22
 11e:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	28 2f       	mov	r18, r24
 124:	2f 70       	andi	r18, 0x0F	; 15
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_10+0x4e>
 12c:	88 0f       	add	r24, r24
 12e:	3a 95       	dec	r19
 130:	ea f7       	brpl	.-6      	; 0x12c <__vector_10+0x4c>
 132:	82 2b       	or	r24, r18
	PORTB = control;
 134:	88 bb       	out	0x18, r24	; 24
	asm volatile ("nop");
 136:	00 00       	nop
	control = PINB;
 138:	56 b3       	in	r21, 0x16	; 22
	row = 0;
 13a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <row>
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	25 2f       	mov	r18, r21
 144:	30 e0       	ldi	r19, 0x00	; 0
	}
	return true;
}

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 146:	61 e0       	ldi	r22, 0x01	; 1
	control = (PINB & 0b00001111) | (0b00010000 << col);
	PORTB = control;
	asm volatile ("nop");
	control = PINB;
	row = 0;
	while (row < 4) {
 148:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <row>
 14c:	44 30       	cpi	r20, 0x04	; 4
 14e:	08 f0       	brcs	.+2      	; 0x152 <__vector_10+0x72>
 150:	46 c0       	rjmp	.+140    	; 0x1de <__vector_10+0xfe>
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
 152:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <row>
 156:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <row>
 15a:	fc 01       	movw	r30, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__vector_10+0x82>
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	7a 95       	dec	r23
 164:	e2 f7       	brpl	.-8      	; 0x15e <__vector_10+0x7e>
 166:	e2 23       	and	r30, r18
 168:	f3 23       	and	r31, r19
 16a:	dc 01       	movw	r26, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <__vector_10+0x92>
 16e:	aa 0f       	add	r26, r26
 170:	bb 1f       	adc	r27, r27
 172:	4a 95       	dec	r20
 174:	e2 f7       	brpl	.-8      	; 0x16e <__vector_10+0x8e>
 176:	ea 17       	cp	r30, r26
 178:	fb 07       	cpc	r31, r27
 17a:	f1 f4       	brne	.+60     	; 0x1b8 <__vector_10+0xd8>
			if (!isKeyLocked(col, row)) {
 17c:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 180:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	74 e0       	ldi	r23, 0x04	; 4
 188:	47 9f       	mul	r20, r23
 18a:	e0 0d       	add	r30, r0
 18c:	f1 1d       	adc	r31, r1
 18e:	11 24       	eor	r1, r1
 190:	ef 59       	subi	r30, 0x9F	; 159
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	40 81       	ld	r20, Z
	asm volatile ("nop");
	control = PINB;
	row = 0;
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
			if (!isKeyLocked(col, row)) {
 196:	41 11       	cpse	r20, r1
 198:	1c c0       	rjmp	.+56     	; 0x1d2 <__vector_10+0xf2>
				lockKey(col, row);
 19a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 19e:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	return true;
}

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	74 e0       	ldi	r23, 0x04	; 4
 1a6:	47 9f       	mul	r20, r23
 1a8:	e0 0d       	add	r30, r0
 1aa:	f1 1d       	adc	r31, r1
 1ac:	11 24       	eor	r1, r1
 1ae:	ef 59       	subi	r30, 0x9F	; 159
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	60 83       	st	Z, r22
	row = 0;
	while (row < 4) {
		if ((control & (0b00000001 << row)) == (0b00000001 << row)) {
			if (!isKeyLocked(col, row)) {
				lockKey(col, row);
				PORTA = control;
 1b4:	5b bb       	out	0x1b, r21	; 27
 1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <__vector_10+0xf2>
			}
		} else {
			unlockKey(col, row);
 1b8:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 1bc:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
}

void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	74 e0       	ldi	r23, 0x04	; 4
 1c4:	47 9f       	mul	r20, r23
 1c6:	e0 0d       	add	r30, r0
 1c8:	f1 1d       	adc	r31, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	ef 59       	subi	r30, 0x9F	; 159
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	10 82       	st	Z, r1
				PORTA = control;
			}
		} else {
			unlockKey(col, row);
		}
		row++;
 1d2:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <row>
 1d6:	4f 5f       	subi	r20, 0xFF	; 255
 1d8:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <row>
 1dc:	b5 cf       	rjmp	.-150    	; 0x148 <__vector_10+0x68>
	}
	col++;
 1de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <Timer0Init>:

void Timer0Init() {
	OCR0 = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	87 7b       	andi	r24, 0xB7	; 183
 212:	88 60       	ori	r24, 0x08	; 8
 214:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
 216:	89 b7       	in	r24, 0x39	; 57
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
 21c:	83 b7       	in	r24, 0x33	; 51
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	85 60       	ori	r24, 0x05	; 5
 222:	83 bf       	out	0x33, r24	; 51
 224:	08 95       	ret

00000226 <main>:
}

int main(void) {
    DDRB |= 0b11110000;
 226:	87 b3       	in	r24, 0x17	; 23
 228:	80 6f       	ori	r24, 0xF0	; 240
 22a:	87 bb       	out	0x17, r24	; 23
	DDRB &= 0b11110000;
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	87 bb       	out	0x17, r24	; 23

	DDRA = 0b11111111;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
 236:	1b ba       	out	0x1b, r1	; 27
	
	Timer0Init();
 238:	0e 94 05 01 	call	0x20a	; 0x20a <Timer0Init>
	sei();
 23c:	78 94       	sei
 23e:	ff cf       	rjmp	.-2      	; 0x23e <main+0x18>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
