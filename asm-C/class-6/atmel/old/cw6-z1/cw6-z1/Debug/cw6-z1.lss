
cw6-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060c  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056c  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030e  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d4  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  74:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <keypadScan>:
bool timerStarted = false;
volatile uint8_t keyPressedCount = 0;

void keypadScan() {
	// If keypad is not pressed don't do anything
	if ((PINA & 0b00000001) == 0b00000001) {
  7c:	c8 9b       	sbis	0x19, 0	; 25
  7e:	03 c0       	rjmp	.+6      	; 0x86 <keypadScan+0xa>
		keyCaptured = false;
  80:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <keyCaptured>
		return;
  84:	08 95       	ret
	}
	
	// Start timer
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
  86:	83 b7       	in	r24, 0x33	; 51
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	83 bf       	out	0x33, r24	; 51
	timerStarted = true;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timerStarted>
  94:	08 95       	ret

00000096 <main>:
}

int main(void) {
    DDRA = (DDRA | 0b11110000) & 0b11111110;
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0b11110001;
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	81 6f       	ori	r24, 0xF1	; 241
  a2:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 bb       	out	0x17, r24	; 23
	
	sei();
  a8:	78 94       	sei
	
	OCR0 = 5;
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	87 7b       	andi	r24, 0xB7	; 183
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
  b6:	89 b7       	in	r24, 0x39	; 57
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	89 bf       	out	0x39, r24	; 57
	
    while (1) {
		if (!keyCaptured && !timerStarted) {
  bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <keyCaptured>
  c0:	81 11       	cpse	r24, r1
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <main+0x42>
  c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timerStarted>
  c8:	81 11       	cpse	r24, r1
  ca:	f8 cf       	rjmp	.-16     	; 0xbc <main+0x26>
			keypadScan();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <keypadScan>
		}
		if (keyCaptured && (PINA & 0b00000001) == 0b00000001) {
  d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <keyCaptured>
  d4:	88 23       	and	r24, r24
  d6:	91 f3       	breq	.-28     	; 0xbc <main+0x26>
  d8:	c8 9b       	sbis	0x19, 0	; 25
  da:	f0 cf       	rjmp	.-32     	; 0xbc <main+0x26>
			keyCaptured = false;
  dc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <keyCaptured>
  e0:	ed cf       	rjmp	.-38     	; 0xbc <main+0x26>

000000e2 <__vector_10>:
		}
    }
}

ISR(TIMER0_COMP_vect) {
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	cli();
  fa:	f8 94       	cli
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
	
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
		control = (PORTA | 0b11110000) ^ (0b00010000 << col);
 100:	60 e1       	ldi	r22, 0x10	; 16
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	28 2f       	mov	r18, r24
 108:	20 6f       	ori	r18, 0xF0	; 240
 10a:	cb 01       	movw	r24, r22
 10c:	04 2e       	mov	r0, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__vector_10+0x32>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <__vector_10+0x2e>
 118:	82 27       	eor	r24, r18
		PORTA = control;
 11a:	8b bb       	out	0x1b, r24	; 27
		asm volatile ("nop");
 11c:	00 00       	nop
		control = PINA;
		if ((control & 0b00000001) != 0b00000001) {
 11e:	c8 99       	sbic	0x19, 0	; 25
 120:	1a c0       	rjmp	.+52     	; 0x156 <__vector_10+0x74>
			if (col == LeftButton) {
 122:	41 11       	cpse	r20, r1
 124:	09 c0       	rjmp	.+18     	; 0x138 <__vector_10+0x56>
				keyPressedCount++;
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				PORTB = keyPressedCount;
 130:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	88 bb       	out	0x18, r24	; 24
				break;
 136:	14 c0       	rjmp	.+40     	; 0x160 <__vector_10+0x7e>
			} else if (col == RightButton && keyPressedCount > 0) {
 138:	43 30       	cpi	r20, 0x03	; 3
 13a:	69 f4       	brne	.+26     	; 0x156 <__vector_10+0x74>
 13c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	88 23       	and	r24, r24
 142:	71 f0       	breq	.+28     	; 0x160 <__vector_10+0x7e>
				keyPressedCount--;
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				PORTB = keyPressedCount;
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	88 bb       	out	0x18, r24	; 24
				break;
 154:	05 c0       	rjmp	.+10     	; 0x160 <__vector_10+0x7e>
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
ISR(TIMER0_COMP_vect) {
	cli();
	
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
 15a:	44 30       	cpi	r20, 0x04	; 4
 15c:	51 05       	cpc	r21, r1
 15e:	91 f6       	brne	.-92     	; 0x104 <__vector_10+0x22>
				break;
			}
		}
		col++;
	}
	keyCaptured = true;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <keyCaptured>
	PORTA |= 0b11110000;
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	80 6f       	ori	r24, 0xF0	; 240
 16a:	8b bb       	out	0x1b, r24	; 27
	
	// Stop timer
	TCCR0 &= 0b11111000;
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	83 bf       	out	0x33, r24	; 51
	timerStarted = false;
 172:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <timerStarted>
	
	reti();
 176:	18 95       	reti
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
