
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000783  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000620  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000349  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000349  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e6  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <clearKeyLocks>:
	keyLocks[index] = false;
}

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
}
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	ef 59       	subi	r30, 0x9F	; 159
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	10 82       	st	Z, r1
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	80 31       	cpi	r24, 0x10	; 16
  8c:	91 05       	cpc	r25, r1
  8e:	c1 f7       	brne	.-16     	; 0x80 <clearKeyLocks+0x4>
  90:	08 95       	ret

00000092 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	// Stop timer
	TCCR0 &= 0b11111000;
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	83 bf       	out	0x33, r24	; 51
	timerStarted = false;
  ba:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerStarted>
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	80 e0       	ldi	r24, 0x00	; 0
	
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
		control = (PINB | 0b11110000) ^ (0b00010000 << col);
  c2:	e0 e1       	ldi	r30, 0x10	; 16
  c4:	f0 e0       	ldi	r31, 0x00	; 0
		i++;
	}
}

void lockKey(uint8_t index) {
	keyLocks[index] = true;
  c6:	71 e0       	ldi	r23, 0x01	; 1
  c8:	02 c0       	rjmp	.+4      	; 0xce <__vector_10+0x3c>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	6f 5f       	subi	r22, 0xFF	; 255
	timerStarted = false;
	
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
		control = (PINB | 0b11110000) ^ (0b00010000 << col);
  ce:	26 b3       	in	r18, 0x16	; 22
  d0:	48 2f       	mov	r20, r24
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	92 2f       	mov	r25, r18
  d6:	90 6f       	ori	r25, 0xF0	; 240
  d8:	9f 01       	movw	r18, r30
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__vector_10+0x50>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <__vector_10+0x4c>
  e6:	29 27       	eor	r18, r25
		PORTB = control;
  e8:	28 bb       	out	0x18, r18	; 24
		asm volatile ("nop");
  ea:	00 00       	nop
		control = PINB;
		if ((control & 0b00000001) != 0b00000001) {
  ec:	b0 99       	sbic	0x16, 0	; 22
  ee:	24 c0       	rjmp	.+72     	; 0x138 <__vector_10+0xa6>
void unlockKey(uint8_t index) {
	keyLocks[index] = false;
}

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
  f0:	da 01       	movw	r26, r20
  f2:	af 59       	subi	r26, 0x9F	; 159
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	9c 91       	ld	r25, X
		control = (PINB | 0b11110000) ^ (0b00010000 << col);
		PORTB = control;
		asm volatile ("nop");
		control = PINB;
		if ((control & 0b00000001) != 0b00000001) {
			if (!isKeyLocked(col)) {
  f8:	91 11       	cpse	r25, r1
  fa:	22 c0       	rjmp	.+68     	; 0x140 <__vector_10+0xae>
		i++;
	}
}

void lockKey(uint8_t index) {
	keyLocks[index] = true;
  fc:	da 01       	movw	r26, r20
  fe:	af 59       	subi	r26, 0x9F	; 159
 100:	bf 4f       	sbci	r27, 0xFF	; 255
 102:	7c 93       	st	X, r23
		asm volatile ("nop");
		control = PINB;
		if ((control & 0b00000001) != 0b00000001) {
			if (!isKeyLocked(col)) {
				lockKey(col);
				if ((col & 0b11111111) == 0b00000000) {
 104:	81 11       	cpse	r24, r1
 106:	09 c0       	rjmp	.+18     	; 0x11a <__vector_10+0x88>
					keyPressedCount++;
 108:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	9f 5f       	subi	r25, 0xFF	; 255
 10e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
					PORTA = keyPressedCount;
 112:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	9b bb       	out	0x1b, r25	; 27
 118:	d8 cf       	rjmp	.-80     	; 0xca <__vector_10+0x38>
				} else if ((col & 0b11111111) == 0b00000011) {
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	89 f4       	brne	.+34     	; 0x140 <__vector_10+0xae>
					if ((keyPressedCount & 0xff) != 0x00) {
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	88 23       	and	r24, r24
 124:	79 f0       	breq	.+30     	; 0x144 <__vector_10+0xb2>
						keyPressedCount--;
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						PORTA = keyPressedCount;
 130:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	8b bb       	out	0x1b, r24	; 27
 136:	06 c0       	rjmp	.+12     	; 0x144 <__vector_10+0xb2>
void lockKey(uint8_t index) {
	keyLocks[index] = true;
}

void unlockKey(uint8_t index) {
	keyLocks[index] = false;
 138:	da 01       	movw	r26, r20
 13a:	af 59       	subi	r26, 0x9F	; 159
 13c:	bf 4f       	sbci	r27, 0xFF	; 255
 13e:	1c 92       	st	X, r1
	TCCR0 &= 0b11111000;
	timerStarted = false;
	
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
 140:	64 30       	cpi	r22, 0x04	; 4
 142:	18 f2       	brcs	.-122    	; 0xca <__vector_10+0x38>
		} else {
			unlockKey(col);
		}
		col++;
	}
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <keypadScan>:

void keypadScan() {
	PORTB |= 0b11110001;
 166:	88 b3       	in	r24, 0x18	; 24
 168:	81 6f       	ori	r24, 0xF1	; 241
 16a:	88 bb       	out	0x18, r24	; 24
	asm volatile ("nop");
 16c:	00 00       	nop
	PORTB &= 0b00001111;
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	88 bb       	out	0x18, r24	; 24
	asm volatile ("nop");
 174:	00 00       	nop
	if ((PINB & 0b00000001) == 0b00000001) {
 176:	b0 9b       	sbis	0x16, 0	; 22
 178:	03 c0       	rjmp	.+6      	; 0x180 <keypadScan+0x1a>
		clearKeyLocks();
 17a:	0e 94 3e 00 	call	0x7c	; 0x7c <clearKeyLocks>
		return;
 17e:	08 95       	ret
	}
	
	// Start timer
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
 180:	83 b7       	in	r24, 0x33	; 51
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	85 60       	ori	r24, 0x05	; 5
 186:	83 bf       	out	0x33, r24	; 51
	timerStarted = true;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timerStarted>
 18e:	08 95       	ret

00000190 <Timer0Init>:
}

void Timer0Init() {
	OCR0 = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 194:	83 b7       	in	r24, 0x33	; 51
 196:	87 7b       	andi	r24, 0xB7	; 183
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
 19c:	89 b7       	in	r24, 0x39	; 57
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	89 bf       	out	0x39, r24	; 57
 1a2:	08 95       	ret

000001a4 <main>:
}

int main(void) {
    DDRB |= 0b11110000;
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	80 6f       	ori	r24, 0xF0	; 240
 1a8:	87 bb       	out	0x17, r24	; 23
	DDRB &= 0b11111110;
 1aa:	b8 98       	cbi	0x17, 0	; 23
	DDRA = 0b11111111;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
 1b0:	1b ba       	out	0x1b, r1	; 27
	
	Timer0Init();
 1b2:	0e 94 c8 00 	call	0x190	; 0x190 <Timer0Init>
	sei();
 1b6:	78 94       	sei
	
    while (1) {
		if (!timerStarted) {
 1b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timerStarted>
 1bc:	81 11       	cpse	r24, r1
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <main+0x14>
			keypadScan();
 1c0:	0e 94 b3 00 	call	0x166	; 0x166 <keypadScan>
 1c4:	f9 cf       	rjmp	.-14     	; 0x1b8 <main+0x14>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
