
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000743  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062b  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d4  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000303  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bb  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  74:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <checkKeyLocksCleared>:
	false, false, false, false
};

volatile uint8_t col = 0;

bool checkKeyLocksCleared() {
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i = 0;
	while (i < 4) {
		if (keyLocks[i]) {
  80:	fc 01       	movw	r30, r24
  82:	ef 59       	subi	r30, 0x9F	; 159
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	20 81       	ld	r18, Z
  88:	21 11       	cpse	r18, r1
  8a:	06 c0       	rjmp	.+12     	; 0x98 <checkKeyLocksCleared+0x1c>
  8c:	01 96       	adiw	r24, 0x01	; 1

volatile uint8_t col = 0;

bool checkKeyLocksCleared() {
	uint8_t i = 0;
	while (i < 4) {
  8e:	84 30       	cpi	r24, 0x04	; 4
  90:	91 05       	cpc	r25, r1
  92:	b1 f7       	brne	.-20     	; 0x80 <checkKeyLocksCleared+0x4>
		if (keyLocks[i]) {
			return false;
		}
		i++;
	}
	return true;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	08 95       	ret

bool checkKeyLocksCleared() {
	uint8_t i = 0;
	while (i < 4) {
		if (keyLocks[i]) {
			return false;
  98:	80 e0       	ldi	r24, 0x00	; 0
		}
		i++;
	}
	return true;
}
  9a:	08 95       	ret

0000009c <lockKey>:

void lockKey(uint8_t index) {
	keyLocks[index] = true;
  9c:	e8 2f       	mov	r30, r24
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ef 59       	subi	r30, 0x9F	; 159
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <unlockKey>:
}

void unlockKey(uint8_t index) {
	keyLocks[index] = false;
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ef 59       	subi	r30, 0x9F	; 159
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	10 82       	st	Z, r1
  b4:	08 95       	ret

000000b6 <isKeyLocked>:
}

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
  b6:	e8 2f       	mov	r30, r24
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	ef 59       	subi	r30, 0x9F	; 159
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	80 81       	ld	r24, Z
}
  c0:	08 95       	ret

000000c2 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
cli();
  e4:	f8 94       	cli
	if (col > 3) {
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	30 f0       	brcs	.+12     	; 0xfa <__vector_10+0x38>
		if (checkKeyLocksCleared()) {
  ee:	0e 94 3e 00 	call	0x7c	; 0x7c <checkKeyLocksCleared>
  f2:	81 11       	cpse	r24, r1
			PORTA = 0b00000000;
  f4:	1b ba       	out	0x1b, r1	; 27
		}
		col = 0;
  f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}

	uint8_t control;

	control = (PIND & 0b00001111) | (0b00010000 << col);
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <_edata>
 100:	28 2f       	mov	r18, r24
 102:	2f 70       	andi	r18, 0x0F	; 15
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 c0       	rjmp	.+2      	; 0x10c <__vector_10+0x4a>
 10a:	88 0f       	add	r24, r24
 10c:	3a 95       	dec	r19
 10e:	ea f7       	brpl	.-6      	; 0x10a <__vector_10+0x48>
 110:	82 2b       	or	r24, r18
	PORTD = control;
 112:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");
 114:	00 00       	nop
	control = PIND;
 116:	80 b3       	in	r24, 0x10	; 16
	if ((control & 0b00000001) == 0b00000001) {
		if (!isKeyLocked(col)) {
 118:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
void unlockKey(uint8_t index) {
	keyLocks[index] = false;
}

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ef 59       	subi	r30, 0x9F	; 159
 120:	ff 4f       	sbci	r31, 0xFF	; 255

	control = (PIND & 0b00001111) | (0b00010000 << col);
	PORTD = control;
	asm volatile ("nop");
	control = PIND;
	if ((control & 0b00000001) == 0b00000001) {
 122:	80 ff       	sbrs	r24, 0
 124:	0e c0       	rjmp	.+28     	; 0x142 <__vector_10+0x80>
void unlockKey(uint8_t index) {
	keyLocks[index] = false;
}

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
 126:	90 81       	ld	r25, Z
	control = (PIND & 0b00001111) | (0b00010000 << col);
	PORTD = control;
	asm volatile ("nop");
	control = PIND;
	if ((control & 0b00000001) == 0b00000001) {
		if (!isKeyLocked(col)) {
 128:	91 11       	cpse	r25, r1
 12a:	0c c0       	rjmp	.+24     	; 0x144 <__vector_10+0x82>
			lockKey(col);
 12c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
	}
	return true;
}

void lockKey(uint8_t index) {
	keyLocks[index] = true;
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ef 59       	subi	r30, 0x9F	; 159
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	90 83       	st	Z, r25
	asm volatile ("nop");
	control = PIND;
	if ((control & 0b00000001) == 0b00000001) {
		if (!isKeyLocked(col)) {
			lockKey(col);
			PORTA = (control >> 4);
 13a:	82 95       	swap	r24
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	01 c0       	rjmp	.+2      	; 0x144 <__vector_10+0x82>
void lockKey(uint8_t index) {
	keyLocks[index] = true;
}

void unlockKey(uint8_t index) {
	keyLocks[index] = false;
 142:	10 82       	st	Z, r1
		}
	} else {
		unlockKey(col);
	}

	col++;
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <Timer0Init>:

void Timer0Init() {
	OCR0 = 20;
 170:	84 e1       	ldi	r24, 0x14	; 20
 172:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 174:	83 b7       	in	r24, 0x33	; 51
 176:	87 7b       	andi	r24, 0xB7	; 183
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
 17c:	89 b7       	in	r24, 0x39	; 57
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
 182:	83 b7       	in	r24, 0x33	; 51
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	85 60       	ori	r24, 0x05	; 5
 188:	83 bf       	out	0x33, r24	; 51
 18a:	08 95       	ret

0000018c <main>:
}

int main(void) {
    DDRD |= 0b11110000;
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	80 6f       	ori	r24, 0xF0	; 240
 190:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11111110;
 192:	88 98       	cbi	0x11, 0	; 17
	DDRA = 0b11111111;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
 198:	1b ba       	out	0x1b, r1	; 27
	
	Timer0Init();
 19a:	0e 94 b8 00 	call	0x170	; 0x170 <Timer0Init>
	sei();
 19e:	78 94       	sei
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0x14>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
