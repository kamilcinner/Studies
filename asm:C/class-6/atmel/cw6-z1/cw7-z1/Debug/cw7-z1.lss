
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070d  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f6  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000286  00000000  00000000  00000f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000315  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016b  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
}

ISR(INT0_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	ef 93       	push	r30
  9a:	ff 93       	push	r31
	uint8_t col = 0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t control;
	while (col < 4) {
		control = (PIND & 0b00001111) | (0b00010000 << col);
  9e:	60 e1       	ldi	r22, 0x10	; 16
  a0:	70 e0       	ldi	r23, 0x00	; 0
volatile uint8_t col = 0;

volatile uint8_t keyPressCount = 0;

void lockKey(uint8_t index) {
	keyLocks[index] = true;
  a2:	a1 e0       	ldi	r26, 0x01	; 1

ISR(INT0_vect) {
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
		control = (PIND & 0b00001111) | (0b00010000 << col);
  a4:	20 b3       	in	r18, 0x10	; 16
  a6:	48 2f       	mov	r20, r24
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	92 2f       	mov	r25, r18
  ac:	9f 70       	andi	r25, 0x0F	; 15
  ae:	9b 01       	movw	r18, r22
  b0:	08 2e       	mov	r0, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__vector_1+0x3c>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <__vector_1+0x38>
  bc:	29 2b       	or	r18, r25
		PORTD = control;
  be:	22 bb       	out	0x12, r18	; 18
		asm volatile ("nop");
  c0:	00 00       	nop
		control = PIND;
		if ((control & 0b00000100) == 0b00000100) {
  c2:	82 9b       	sbis	0x10, 2	; 16
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <__vector_1+0x66>
void unlockKey(uint8_t index) {
	keyLocks[index] = false;
}

bool isKeyLocked(uint8_t index) {
	return keyLocks[index];
  c6:	fa 01       	movw	r30, r20
  c8:	e0 5a       	subi	r30, 0xA0	; 160
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	90 81       	ld	r25, Z
		control = (PIND & 0b00001111) | (0b00010000 << col);
		PORTD = control;
		asm volatile ("nop");
		control = PIND;
		if ((control & 0b00000100) == 0b00000100) {
			if (!isKeyLocked(col)) {
  ce:	91 11       	cpse	r25, r1
  d0:	0d c0       	rjmp	.+26     	; 0xec <__vector_1+0x70>
volatile uint8_t col = 0;

volatile uint8_t keyPressCount = 0;

void lockKey(uint8_t index) {
	keyLocks[index] = true;
  d2:	fa 01       	movw	r30, r20
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	a0 83       	st	Z, r26
		asm volatile ("nop");
		control = PIND;
		if ((control & 0b00000100) == 0b00000100) {
			if (!isKeyLocked(col)) {
				lockKey(col);
				PORTA = col + 1;
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	98 0f       	add	r25, r24
  de:	9b bb       	out	0x1b, r25	; 27
  e0:	05 c0       	rjmp	.+10     	; 0xec <__vector_1+0x70>
void lockKey(uint8_t index) {
	keyLocks[index] = true;
}

void unlockKey(uint8_t index) {
	keyLocks[index] = false;
  e2:	fa 01       	movw	r30, r20
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	10 82       	st	Z, r1
				lockKey(col);
				PORTA = col + 1;
			}
		} else {
			unlockKey(col);
			col++;
  ea:	8f 5f       	subi	r24, 0xFF	; 255
}

ISR(INT0_vect) {
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	d0 f2       	brcs	.-76     	; 0xa4 <__vector_1+0x28>
		} else {
			unlockKey(col);
			col++;
		}
	}
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void) {
    DDRD |= 0b11110000;
 110:	81 b3       	in	r24, 0x11	; 17
 112:	80 6f       	ori	r24, 0xF0	; 240
 114:	81 bb       	out	0x11, r24	; 17
	DDRD &= 0b11111110;
 116:	88 98       	cbi	0x11, 0	; 17
	DDRA = 0b11111111;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
 11c:	1b ba       	out	0x1b, r1	; 27
	
	
	GICR |= 0b01000000;
 11e:	8b b7       	in	r24, 0x3b	; 59
 120:	80 64       	ori	r24, 0x40	; 64
 122:	8b bf       	out	0x3b, r24	; 59
	
	sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x16>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
