
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d2  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005df  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000211  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000324  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cf  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  74:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <clearKeyLocks>:
	false, false, false, false
};

volatile uint8_t keyPressedCount = 0;

void clearKeyLocks() {
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	uint8_t i = 0;
  86:	19 82       	std	Y+1, r1	; 0x01
	while (i < 4) {
  88:	0a c0       	rjmp	.+20     	; 0x9e <clearKeyLocks+0x22>
		keyLocks[i] = false;
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 2f       	mov	r24, r24
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	8f 59       	subi	r24, 0x9F	; 159
  92:	9f 4f       	sbci	r25, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	10 82       	st	Z, r1
		i++;
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	89 83       	std	Y+1, r24	; 0x01

volatile uint8_t keyPressedCount = 0;

void clearKeyLocks() {
	uint8_t i = 0;
	while (i < 4) {
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	98 f3       	brcs	.-26     	; 0x8a <clearKeyLocks+0xe>
		keyLocks[i] = false;
		i++;
	}
}
  a4:	00 00       	nop
  a6:	0f 90       	pop	r0
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <lockKey>:

void lockKey(uint8_t index) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	89 83       	std	Y+1, r24	; 0x01
	keyLocks[index] = true;
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	8f 59       	subi	r24, 0x9F	; 159
  c2:	9f 4f       	sbci	r25, 0xFF	; 255
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
}
  ca:	00 00       	nop
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <unlockKey>:

void unlockKey(uint8_t index) {
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	1f 92       	push	r1
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	89 83       	std	Y+1, r24	; 0x01
	keyLocks[index] = false;
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	88 2f       	mov	r24, r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	8f 59       	subi	r24, 0x9F	; 159
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
}
  ee:	00 00       	nop
  f0:	0f 90       	pop	r0
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <isKeyLocked>:

bool isKeyLocked(uint8_t index) {
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	1f 92       	push	r1
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	89 83       	std	Y+1, r24	; 0x01
	return keyLocks[index];
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8f 59       	subi	r24, 0x9F	; 159
 10c:	9f 4f       	sbci	r25, 0xFF	; 255
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
}
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <__vector_10>:

ISR(TIMER0_COMP_vect) {
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	00 d0       	rcall	.+0      	; 0x144 <__vector_10+0x2a>
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	// Stop timer
	TCCR0 &= 0b11111000;
 148:	83 e5       	ldi	r24, 0x53	; 83
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	23 e5       	ldi	r18, 0x53	; 83
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	28 7f       	andi	r18, 0xF8	; 248
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	timerStarted = false;
 15a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	uint8_t col = 0;
 15e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t control;
	while (col < 4) {
 160:	3d c0       	rjmp	.+122    	; 0x1dc <__vector_10+0xc2>
		control = (PINB | 0b11110000) ^ (0b00010000 << col);
 162:	86 e3       	ldi	r24, 0x36	; 54
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	80 6f       	ori	r24, 0xF0	; 240
 16c:	48 2f       	mov	r20, r24
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <__vector_10+0x64>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <__vector_10+0x60>
 182:	84 27       	eor	r24, r20
 184:	8a 83       	std	Y+2, r24	; 0x02
		PORTB = control;
 186:	88 e3       	ldi	r24, 0x38	; 56
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	2a 81       	ldd	r18, Y+2	; 0x02
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
		asm volatile ("nop");
 190:	00 00       	nop
		control = PINB;
 192:	86 e3       	ldi	r24, 0x36	; 54
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	8a 83       	std	Y+2, r24	; 0x02
		if ((control & 0b00000001) != 0b00000001) {
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	99 27       	eor	r25, r25
 1a6:	89 2b       	or	r24, r25
 1a8:	99 f4       	brne	.+38     	; 0x1d0 <__vector_10+0xb6>
			if (!isKeyLocked(col)) {
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	0e 94 7c 00 	call	0xf8	; 0xf8 <isKeyLocked>
 1b0:	98 2f       	mov	r25, r24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	89 27       	eor	r24, r25
 1b6:	88 23       	and	r24, r24
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <__vector_10+0xbc>
				lockKey(col);
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	0e 94 57 00 	call	0xae	; 0xae <lockKey>
				PORTA = (control >> 4);
 1c0:	8b e3       	ldi	r24, 0x3B	; 59
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	2a 81       	ldd	r18, Y+2	; 0x02
 1c6:	22 95       	swap	r18
 1c8:	2f 70       	andi	r18, 0x0F	; 15
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <__vector_10+0xbc>
			}
		} else {
			unlockKey(col);
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	0e 94 6a 00 	call	0xd4	; 0xd4 <unlockKey>
		}
		col++;
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0b11111000;
	timerStarted = false;
	
	uint8_t col = 0;
	uint8_t control;
	while (col < 4) {
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	08 f4       	brcc	.+2      	; 0x1e4 <__vector_10+0xca>
 1e2:	bf cf       	rjmp	.-130    	; 0x162 <__vector_10+0x48>
		} else {
			unlockKey(col);
		}
		col++;
	}
}
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <keypadScan>:

void keypadScan() {
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	//PORTB |= 0b11110001;
	PORTB = 0xff;
 21a:	88 e3       	ldi	r24, 0x38	; 56
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	asm volatile ("nop");
 224:	00 00       	nop
	PORTB &= 0b00001111;
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	28 e3       	ldi	r18, 0x38	; 56
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	2f 70       	andi	r18, 0x0F	; 15
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
	asm volatile ("nop");
 238:	00 00       	nop
	if ((PINB & 0b00000001) == 0b00000001) {
 23a:	86 e3       	ldi	r24, 0x36	; 54
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	81 70       	andi	r24, 0x01	; 1
 248:	99 27       	eor	r25, r25
 24a:	89 2b       	or	r24, r25
 24c:	39 f0       	breq	.+14     	; 0x25c <keypadScan+0x4a>
		clearKeyLocks();
 24e:	0e 94 3e 00 	call	0x7c	; 0x7c <clearKeyLocks>
		PORTA = 0b00000000;
 252:	8b e3       	ldi	r24, 0x3B	; 59
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	10 82       	st	Z, r1
		return;
 25a:	0d c0       	rjmp	.+26     	; 0x276 <keypadScan+0x64>
	}
	
	// Start timer
	TCCR0 = (TCCR0 & 0b11111101) | 0b00000101;
 25c:	83 e5       	ldi	r24, 0x53	; 83
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	23 e5       	ldi	r18, 0x53	; 83
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	28 7f       	andi	r18, 0xF8	; 248
 26a:	25 60       	ori	r18, 0x05	; 5
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
	timerStarted = true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <Timer0Init>:

void Timer0Init() {
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	OCR0 = 1;
 284:	8c e5       	ldi	r24, 0x5C	; 92
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 28e:	83 e5       	ldi	r24, 0x53	; 83
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	23 e5       	ldi	r18, 0x53	; 83
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	27 7b       	andi	r18, 0xB7	; 183
 29c:	28 60       	ori	r18, 0x08	; 8
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
	TIMSK |= 0b00000010;
 2a2:	89 e5       	ldi	r24, 0x59	; 89
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	29 e5       	ldi	r18, 0x59	; 89
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	20 81       	ld	r18, Z
 2ae:	22 60       	ori	r18, 0x02	; 2
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
}
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <main>:

int main(void) {
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
    //DDRB |= 0b11110000;
	//DDRB &= 0b11111110;
	DDRB = 0xf0;
 2c4:	87 e3       	ldi	r24, 0x37	; 55
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	20 ef       	ldi	r18, 0xF0	; 240
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
	DDRA = 0b11111111;
 2ce:	8a e3       	ldi	r24, 0x3A	; 58
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
	PORTA = 0b00000000;
 2d8:	8b e3       	ldi	r24, 0x3B	; 59
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	10 82       	st	Z, r1
	
	Timer0Init();
 2e0:	0e 94 3e 01 	call	0x27c	; 0x27c <Timer0Init>
	sei();
 2e4:	78 94       	sei
	
    while (1) {
		if (!timerStarted) {
 2e6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	89 27       	eor	r24, r25
 2ee:	88 23       	and	r24, r24
 2f0:	d1 f3       	breq	.-12     	; 0x2e6 <main+0x2a>
			keypadScan();
 2f2:	0e 94 09 01 	call	0x212	; 0x212 <keypadScan>
		}
    }
 2f6:	f7 cf       	rjmp	.-18     	; 0x2e6 <main+0x2a>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
