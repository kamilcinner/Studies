
cw7-z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089f  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000674  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000427  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c4  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  74:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <clearKeyLocks>:
	keyLocks[(4 * col) + row] = false;
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
}
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	ef 59       	subi	r30, 0x9F	; 159
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	10 82       	st	Z, r1
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	80 31       	cpi	r24, 0x10	; 16
  8c:	91 05       	cpc	r25, r1
  8e:	c1 f7       	brne	.-16     	; 0x80 <clearKeyLocks+0x4>
  90:	08 95       	ret

00000092 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	4f 92       	push	r4
  9e:	5f 92       	push	r5
  a0:	7f 92       	push	r7
  a2:	8f 92       	push	r8
  a4:	9f 92       	push	r9
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	// Stop timer
	TCCR0 &= 0b11111000;
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	83 bf       	out	0x33, r24	; 51
	timerStarted = false;
  d8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerStarted>
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	41 2c       	mov	r4, r1
  e2:	51 2c       	mov	r5, r1
	
	uint8_t col = 0;
	uint8_t row;
	uint8_t control;
	while (col < 4) {
		control = (PIND | 0b11110000) ^ (0b00010000 << col);
  e4:	00 e1       	ldi	r16, 0x10	; 16
  e6:	10 e0       	ldi	r17, 0x00	; 0
		PORTD = control;
		asm volatile ("nop");
		control = PIND;
		row = 0;
		while (row < 4) {
			if ((control & (0b00000001 << row)) != (0b00000001 << row)) {
  e8:	c1 e0       	ldi	r28, 0x01	; 1
  ea:	d0 e0       	ldi	r29, 0x00	; 0
		i++;
	}
}

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
  ec:	77 24       	eor	r7, r7
  ee:	73 94       	inc	r7
						PORTA = out;
					} else {
						mask >>= ((numbersCount - 2) * 4);
						out = PINB;
						out |= (keyCode << ((numbersCount - 2) * 4));
						out &= ((keyCode << ((numbersCount - 2) * 4)) | mask);
  f0:	0f 2e       	mov	r0, r31
  f2:	f0 ef       	ldi	r31, 0xF0	; 240
  f4:	ef 2e       	mov	r14, r31
  f6:	f1 2c       	mov	r15, r1
  f8:	f0 2d       	mov	r31, r0
	
	uint8_t col = 0;
	uint8_t row;
	uint8_t control;
	while (col < 4) {
		control = (PIND | 0b11110000) ^ (0b00010000 << col);
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	28 2f       	mov	r18, r24
  fe:	20 6f       	ori	r18, 0xF0	; 240
 100:	c8 01       	movw	r24, r16
 102:	04 2c       	mov	r0, r4
 104:	02 c0       	rjmp	.+4      	; 0x10a <__vector_10+0x78>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <__vector_10+0x74>
 10e:	82 27       	eor	r24, r18
		PORTD = control;
 110:	82 bb       	out	0x12, r24	; 18
		asm volatile ("nop");
 112:	00 00       	nop
		control = PIND;
 114:	40 b3       	in	r20, 0x10	; 16
		while (row < 4) {
			if ((control & (0b00000001 << row)) != (0b00000001 << row)) {
				if (!isKeyLocked(col, row)) {
					lockKey(col, row);
					uint8_t keyCode = 0b00000000;
					keyCode |= col << 2; // ew zamienic z row
 116:	b4 2c       	mov	r11, r4
 118:	bb 0c       	add	r11, r11
 11a:	bb 0c       	add	r11, r11
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = control;
		asm volatile ("nop");
		control = PIND;
		row = 0;
		while (row < 4) {
			if ((control & (0b00000001 << row)) != (0b00000001 << row)) {
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	de 01       	movw	r26, r28
 124:	08 2e       	mov	r0, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_10+0x9a>
 128:	aa 0f       	add	r26, r26
 12a:	bb 1f       	adc	r27, r27
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <__vector_10+0x96>
 130:	6a 01       	movw	r12, r20
 132:	ca 22       	and	r12, r26
 134:	db 22       	and	r13, r27
 136:	ac 15       	cp	r26, r12
 138:	bd 05       	cpc	r27, r13
 13a:	09 f4       	brne	.+2      	; 0x13e <__vector_10+0xac>
 13c:	78 c0       	rjmp	.+240    	; 0x22e <__vector_10+0x19c>
 13e:	dc 01       	movw	r26, r24
 140:	a6 0f       	add	r26, r22
 142:	b7 1f       	adc	r27, r23
void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
}

bool isKeyLocked(uint8_t col, uint8_t row) {
	return keyLocks[(4 * col) + row];
 144:	9d 01       	movw	r18, r26
 146:	2f 59       	subi	r18, 0x9F	; 159
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
		asm volatile ("nop");
		control = PIND;
		row = 0;
		while (row < 4) {
			if ((control & (0b00000001 << row)) != (0b00000001 << row)) {
				if (!isKeyLocked(col, row)) {
 14e:	21 11       	cpse	r18, r1
 150:	74 c0       	rjmp	.+232    	; 0x23a <__vector_10+0x1a8>
		i++;
	}
}

void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
 152:	70 82       	st	Z, r7
			if ((control & (0b00000001 << row)) != (0b00000001 << row)) {
				if (!isKeyLocked(col, row)) {
					lockKey(col, row);
					uint8_t keyCode = 0b00000000;
					keyCode |= col << 2; // ew zamienic z row
					keyCode |= row;
 154:	2b 2d       	mov	r18, r11
 156:	28 2b       	or	r18, r24
					uint8_t out;
					uint8_t mask = 0b11110000;
					//if (numbersCount != 0b0000000) mask = 0b00001111;
					//if (numbersCount != 0b00000010) mask = 0b00001111;
					if (numbersCount < 2) {
 158:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	32 30       	cpi	r19, 0x02	; 2
 15e:	30 f5       	brcc	.+76     	; 0x1ac <__vector_10+0x11a>
						mask >>= (numbersCount * 4);
 160:	b0 91 60 00 	lds	r27, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out = PINA;
 164:	99 b2       	in	r9, 0x19	; 25
						out |= (keyCode << (numbersCount * 4));
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	a0 90 60 00 	lds	r10, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out &= ((keyCode << (numbersCount * 4)) | mask);
 16c:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	bb 0f       	add	r27, r27
 172:	bb 0f       	add	r27, r27
 174:	67 01       	movw	r12, r14
 176:	02 c0       	rjmp	.+4      	; 0x17c <__vector_10+0xea>
 178:	d5 94       	asr	r13
 17a:	c7 94       	ror	r12
 17c:	ba 95       	dec	r27
 17e:	e2 f7       	brpl	.-8      	; 0x178 <__vector_10+0xe6>
 180:	aa 0f       	add	r26, r26
 182:	aa 0f       	add	r26, r26
 184:	f9 01       	movw	r30, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <__vector_10+0xfa>
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	aa 95       	dec	r26
 18e:	e2 f7       	brpl	.-8      	; 0x188 <__vector_10+0xf6>
 190:	df 01       	movw	r26, r30
 192:	ac 29       	or	r26, r12
 194:	ba 2d       	mov	r27, r10
 196:	bb 0f       	add	r27, r27
 198:	bb 0f       	add	r27, r27
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__vector_10+0x10e>
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	ba 95       	dec	r27
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <__vector_10+0x10a>
 1a4:	29 29       	or	r18, r9
 1a6:	a2 23       	and	r26, r18
						PORTA = out;
 1a8:	ab bb       	out	0x1b, r26	; 27
 1aa:	35 c0       	rjmp	.+106    	; 0x216 <__vector_10+0x184>
					} else {
						mask >>= ((numbersCount - 2) * 4);
 1ac:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out = PINB;
 1b0:	a6 b2       	in	r10, 0x16	; 22
						out |= (keyCode << ((numbersCount - 2) * 4));
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
						out &= ((keyCode << ((numbersCount - 2) * 4)) | mask);
 1b8:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	91 2c       	mov	r9, r1
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	8f 1a       	sub	r8, r31
 1c2:	91 08       	sbc	r9, r1
 1c4:	88 0c       	add	r8, r8
 1c6:	99 1c       	adc	r9, r9
 1c8:	88 0c       	add	r8, r8
 1ca:	99 1c       	adc	r9, r9
 1cc:	f7 01       	movw	r30, r14
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_10+0x142>
 1d0:	f5 95       	asr	r31
 1d2:	e7 95       	ror	r30
 1d4:	8a 94       	dec	r8
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <__vector_10+0x13e>
 1d8:	4f 01       	movw	r8, r30
 1da:	d1 2c       	mov	r13, r1
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	cf 1a       	sub	r12, r31
 1e0:	d1 08       	sbc	r13, r1
 1e2:	cc 0c       	add	r12, r12
 1e4:	dd 1c       	adc	r13, r13
 1e6:	cc 0c       	add	r12, r12
 1e8:	dd 1c       	adc	r13, r13
 1ea:	f9 01       	movw	r30, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__vector_10+0x160>
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ca 94       	dec	r12
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <__vector_10+0x15c>
 1f6:	6f 01       	movw	r12, r30
 1f8:	c8 28       	or	r12, r8
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	12 97       	sbiw	r26, 0x02	; 2
 1fe:	aa 0f       	add	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	aa 0f       	add	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	02 c0       	rjmp	.+4      	; 0x20c <__vector_10+0x17a>
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	aa 95       	dec	r26
 20e:	e2 f7       	brpl	.-8      	; 0x208 <__vector_10+0x176>
 210:	2a 29       	or	r18, r10
 212:	c2 22       	and	r12, r18
						PORTB = out;
 214:	c8 ba       	out	0x18, r12	; 24
					}
					numbersCount++;
 216:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	e3 ed       	ldi	r30, 0xD3	; 211
 222:	f0 e3       	ldi	r31, 0x30	; 48
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <__vector_10+0x192>
 228:	00 c0       	rjmp	.+0      	; 0x22a <__vector_10+0x198>
 22a:	00 00       	nop
 22c:	06 c0       	rjmp	.+12     	; 0x23a <__vector_10+0x1a8>
 22e:	dc 01       	movw	r26, r24
 230:	a6 0f       	add	r26, r22
 232:	b7 1f       	adc	r27, r23
void lockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = true;
}

void unlockKey(uint8_t col, uint8_t row) {
	keyLocks[(4 * col) + row] = false;
 234:	af 59       	subi	r26, 0x9F	; 159
 236:	bf 4f       	sbci	r27, 0xFF	; 255
 238:	1c 92       	st	X, r1
 23a:	01 96       	adiw	r24, 0x01	; 1
		control = (PIND | 0b11110000) ^ (0b00010000 << col);
		PORTD = control;
		asm volatile ("nop");
		control = PIND;
		row = 0;
		while (row < 4) {
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	91 05       	cpc	r25, r1
 240:	09 f0       	breq	.+2      	; 0x244 <__vector_10+0x1b2>
 242:	6f cf       	rjmp	.-290    	; 0x122 <__vector_10+0x90>
 244:	ff ef       	ldi	r31, 0xFF	; 255
 246:	4f 1a       	sub	r4, r31
 248:	5f 0a       	sbc	r5, r31
 24a:	6c 5f       	subi	r22, 0xFC	; 252
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
	timerStarted = false;
	
	uint8_t col = 0;
	uint8_t row;
	uint8_t control;
	while (col < 4) {
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	48 16       	cp	r4, r24
 252:	51 04       	cpc	r5, r1
 254:	09 f0       	breq	.+2      	; 0x258 <__vector_10+0x1c6>
 256:	51 cf       	rjmp	.-350    	; 0xfa <__vector_10+0x68>
			}
			row++;
		}
		col++;
	}
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	8f 90       	pop	r8
 288:	7f 90       	pop	r7
 28a:	5f 90       	pop	r5
 28c:	4f 90       	pop	r4
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <keypadScan>:

void keypadScan() {
	PORTD |= 0b11110000;
 298:	82 b3       	in	r24, 0x12	; 18
 29a:	80 6f       	ori	r24, 0xF0	; 240
 29c:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");
 29e:	00 00       	nop
	PORTD &= 0b00001111;
 2a0:	82 b3       	in	r24, 0x12	; 18
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	82 bb       	out	0x12, r24	; 18
	asm volatile ("nop");
 2a6:	00 00       	nop
	if ((PIND & 0b00001111) == 0b00001111) {
 2a8:	80 b3       	in	r24, 0x10	; 16
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	8f 30       	cpi	r24, 0x0F	; 15
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <keypadScan+0x1e>
		clearKeyLocks();
 2b0:	0e 94 3e 00 	call	0x7c	; 0x7c <clearKeyLocks>
		return;
 2b4:	08 95       	ret
	}
	PORTD |= 0b11110000;
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	80 6f       	ori	r24, 0xF0	; 240
 2ba:	82 bb       	out	0x12, r24	; 18
	
	// Start timer
	TCCR0 = (TCCR0 & 0b11111100) | 0b00000100;
 2bc:	83 b7       	in	r24, 0x33	; 51
 2be:	88 7f       	andi	r24, 0xF8	; 248
 2c0:	84 60       	ori	r24, 0x04	; 4
 2c2:	83 bf       	out	0x33, r24	; 51
	timerStarted = true;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timerStarted>
 2ca:	08 95       	ret

000002cc <Timer0Init>:
}

void Timer0Init() {
	OCR0 = 20;
 2cc:	84 e1       	ldi	r24, 0x14	; 20
 2ce:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = (TCCR0 & 0b10111111) | 0b00001000;
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	87 7b       	andi	r24, 0xB7	; 183
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 0b00000010;
 2d8:	89 b7       	in	r24, 0x39	; 57
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	89 bf       	out	0x39, r24	; 57
 2de:	08 95       	ret

000002e0 <main>:
}

int main(void) {
    DDRD = 0b11110000;
 2e0:	80 ef       	ldi	r24, 0xF0	; 240
 2e2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b11110000;
 2e4:	82 bb       	out	0x12, r24	; 18
	PORTD |= 0b00001111;
 2e6:	82 b3       	in	r24, 0x12	; 18
 2e8:	8f 60       	ori	r24, 0x0F	; 15
 2ea:	82 bb       	out	0x12, r24	; 18
	DDRA = 0b11111111;
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
 2f0:	87 bb       	out	0x17, r24	; 23
	PORTA = 0b00000000;
 2f2:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0b00000000;
 2f4:	18 ba       	out	0x18, r1	; 24
	
	Timer0Init();
 2f6:	0e 94 66 01 	call	0x2cc	; 0x2cc <Timer0Init>
	sei();
 2fa:	78 94       	sei
	
    while (numbersCount < 4) {
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <main+0x2a>
		if (!timerStarted) {
 2fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timerStarted>
 302:	81 11       	cpse	r24, r1
 304:	02 c0       	rjmp	.+4      	; 0x30a <main+0x2a>
			keypadScan();
 306:	0e 94 4c 01 	call	0x298	; 0x298 <keypadScan>
	PORTB = 0b00000000;
	
	Timer0Init();
	sei();
	
    while (numbersCount < 4) {
 30a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	b0 f3       	brcs	.-20     	; 0x2fe <main+0x1e>
		if (!timerStarted) {
			keypadScan();
		}
    }
}
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
